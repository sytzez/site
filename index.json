[{"content":"A solution to inheritance I\u0026rsquo;ve had some more thought about my programming language \u0026ldquo;Compost\u0026rdquo;. It has a solution to the old problems of object oriented programming, mainly class inheritance.\nOne of the problems class inheritance tries to solve is repeated code between classes, by creating a superclass that contains all the common methods, which subclasses inherit from it. But class inheritance comes with its own problems, and has gotten out of favor.\nI want to show an example of the classic \u0026ldquo;Shapes\u0026rdquo; library, often used to teach object oriented programming, but implemented in Compost. Just read through the code comments to see the possibilities.\nmod Vec2 class x: Float y: Float traits X: Float Y: Float Multiply: (factor: Float) -\u0026gt; Vec2 Add: (other: Vec2) -\u0026gt; Vec2 defs X: x Y: y Multiply: Vec2(X * factor, Y * factor) Add: Vec2(X + other.X, Y + other.Y) # Converts it to a Point. The Point trait is auto-declared by the Point module .Point: Point(X, Y) # A type of Vec2 with the same x and y. By defining the X and Y traits of Vec2, # it auto-defines all other Vec2 traits. You can use Vec2 and DiagonalVec2 instances # completely interchangeably because they have the same interfaces of traits. mod DiagonalVec2 class value: Float defs Vector X: value Y: value mod Point class x: Float y: Float traits X: Float Y: Float Translate: (offset: Vec2) -\u0026gt; Point defs X: x Y: y Translate: Point(x + offset.X, y + offset.Y) .Vec2: Vec2(x, y) # A function to create a \u0026#39;diagonal\u0026#39; point. This would work the same as # creating a whole DiagonalPoint class, since a class just becomes a function. let DiagonalPoint(value: Float): DiagonalVec2(value).Point # Shape declares some traits but doesn\u0026#39;t define them. It works like an interface. mod Shape traits Center: Point Area: Float Perimeter: Float # Rectangle declares some traits but doesn\u0026#39;t define all of them. # It defines some of Shape\u0026#39;s traits using those declarations. mod Rectangle traits TopLeft: Point BottomRight: Point Size: Vec2 defs # Just to make clear we purposely haven\u0026#39;t defined this: ? means undefined. TopLeft: ? BottomRight: TopLeft.Translate(Size) Size: ? # We define Shape\u0026#39;s traits here. So if any class defines Rectangle\u0026#39;s traits, # Shape\u0026#39;s traits will also be defined for that class. Shape Center: Rectangle.TopLeft.Translate(Rectangle.Size.Multiply(0.5)) Area: Rectangle.Size.X * Rectangle.Size.Y Perimeter: (Rectangle.Size.X + Rectangle.Size.Y) * 2 # Declares but doesn\u0026#39;t define a Square.Size trait. Square is another interface. # It automatically defines the Rectangle.Size trait if the Square.Size trait is defined mod Square traits Size: Float defs Size: ? Rectangle: Size: Vec2(Square.Size, Square.Size) # One type of Square class, created by giving a top_left corner and a size. # This will define all of Square\u0026#39;s, all of Rectangle\u0026#39;s and all of Shape\u0026#39;s traits. mod TopLeftSquare class top_left: Point size: Float defs Square Size: size Rectangle TopLeft: top_left mod CenterSquare # Another type of Square class class center: Point size: Float defs Square Size: size Rectangle Center: center TopLeft: center.Translate(Rectangle.Size.Multiply(-0.5)) # A constant definition. let Pi: 3.14159265359 mod Circle class center: Point radius: Float defs Shape Center: center Area: Pi * radius * radius Perimeter: 2 * Pi * radius # A function definition that takes any shape. let AreaPlusPerimeter(shape: Shape.Area \u0026amp; Shape.Perimeter) shape.Area + shape.Perimeter # The main function let Main # Creates a square by specifying the top left corner and the size. # Then returns the Shape.Center trait of it. TopLeftSquare top_left: Point(x: 10, y: 10) size: 100 Center Defining functions or variables A thing I wasn\u0026rsquo;t sure about before is how to define functions and \u0026ldquo;variables\u0026rdquo;. I came to the conclusion that those two are really the same, since \u0026ldquo;variables\u0026rdquo; won\u0026rsquo;t change. They are really constants due to the fact that we\u0026rsquo;re a functional language. When \u0026ldquo;changing\u0026rdquo; a \u0026ldquo;variable\u0026rdquo; we\u0026rsquo;re just defining a new constant.\nIt was difficult to find a common keyword to define a function or a constant. I\u0026rsquo;ve come to the realisation that we don\u0026rsquo;t even need a keyword. Functions or constants will be defined like this:\nPi: 3.14 AddOne(x: Int): x + 1 LongerFunction(instance: MyInterface) instance Method1 Method2 Method1 Functions can be defined using a semicolon or by adding one or more indented lines below the name.\nIn the last function I showcase how method chaining is done. We simply put them on the next line.\nSo how do we define constants inside functions? Like this:\nAnotherFunction(instance: MyInterface) ConstantOne: instance.Method1 ConstantTwo: 3 ConstantThree instance Method3(ConstantTwo) Method1 ConstantOne.Method4(ConstantThree) To explain: it creates ConstantOne, which will contain the result of instance.Method1. ConstantTwo is simply 3. ConstantThree contains Method3(3) called on our instance, and then Method1 called on that. The function returns ConstantOne with Method4(ConstantThree) called on it.\nI just realized it might be difficult the notice the difference between chaining methods and defining functions/constants. I\u0026rsquo;ll have to find a solution for that. Maybe I should just use let to define anything. That would look like this:\nlet AnotherFunction(instance: MyInterface) let ConstantOne: instance.Method1 let ConstantTwo: 3 let ConstantThree instance Method3(ConstantTwo) Method1 ConstantOne.Method4(ConstantThree) ","permalink":"https://sytzez.com/blog/sketch-for-a-new-programming-language-2/","summary":"A solution to inheritance I\u0026rsquo;ve had some more thought about my programming language \u0026ldquo;Compost\u0026rdquo;. It has a solution to the old problems of object oriented programming, mainly class inheritance.\nOne of the problems class inheritance tries to solve is repeated code between classes, by creating a superclass that contains all the common methods, which subclasses inherit from it. But class inheritance comes with its own problems, and has gotten out of favor.","title":"Sketch for a new programming language: Part 2"},{"content":"I\u0026rsquo;m coming up with the spec of a new programming language. Working title: \u0026ldquo;Compost\u0026rdquo;. Don\u0026rsquo;t worry, it\u0026rsquo;s just for fun. For now this is just a first sketch of the ideas I had today. They are subject to change.\nThe main idea of the language is ultimate composability and recomposability. It forces the programmer to think in terms of the minimum amount of dependencies required for each part of the code, and makes each part as reusable as possible. It will also use \u0026lsquo;value\u0026rsquo; semantics and it will be highly encapsulated. It\u0026rsquo;s not possible to directly change or read any fields of an object except through traits. In fact it will be impossible (and irrelevant) to know what class and object is, types will be defined solely on the basis of traits.\nClasses will not be allowed to have any raw fields (such as ints, bools, floats), instead their dependencies are defined on the basis of traits, making them completely interchangeable.\nLet\u0026rsquo;s start off with some example code:\nmod Cat # Defines a module, an interface and a class, all called \u0026#39;Cat\u0026#39;. It also defines a trait called \u0026#39;Cat\u0026#39; with type () -\u0026gt; Cat, to transform other things into a Cat class # Dependencies of the Cat class name: String # String is an interface birthDate: Date # Date is also an interface traits # The traits making up the Cat interface Name: String # Trait Cat.Name has no arguments and returns a String interface Age: (now: Date) -\u0026gt; Timespan # Cat.Age takes a Date interface and returns a Timespan interface defs # The trait definitions for the Cat class Name # Defines the Cat.Name trait for Cat name # Simply return Cat.name Age # Defines the Cat.Age trait for Cat Date.Diff: birthDate, now # Call function Diff from module Date. Use Cat.birthDate and the argument from the Age trait String # Define the standard String trait for a Cat, meaning the Cat can be transformed into a String Name + \u0026#34; \u0026#34; + Age.String # Return the Cat.name and Cat.Age converted into a String # Because this String definition doesn\u0026#39;t use any dependencies of Cat, it can be implemented automatically for other classes implementing the Cat interface I could shorten the defs to:\ndefs Name: name Age: Date.Diff(birthDate, now) String: name + \u0026#34; \u0026#34; + Age.String A lot of stuff is implied from the context by the code. The full code would be:\nmod Cat traits # Some traits on module Cat Name: String Age: (now: Date) -\u0026gt; Timespan interface Cat # Interface Cat, consisting of traits Cat.Name Cat.Age String class Cat implements Cat # Class Cat implementing the interface. Lists dependencies. name: String birthDate: Date def Cat.Name for Cat Cat.name def Cat.Age for Cat Date.Diff: Cat.birthDate, Age.now def String for Cat Cat.Name + \u0026#34; \u0026#34; + Cat.Age.String This exports a lot of things that can be used outside of the mod:\nThe Cat.Name and Cat.Age traits. The Cat interface, made out of the Cat.Name, Cat.Age and String traits. One function: Cat, which takes a name and a birthDate and returns an object implementing Cat. Ergo, the Cat constructor. The Cat trait, which can be defined for other classes that can be converted into a Cat or return a Cat. Type: () -\u0026gt; Cat. No other functions. We haven\u0026rsquo;t declared any, we could. The Cat class, which can be used only to create subclasses inheriting its trait definitions. It can\u0026rsquo;t be a type. Let\u0026rsquo;s define another class in this context:\nmod Human class name: String cat: Cat # This dependency needs to implement the Cat interface. It doesn\u0026#39;t have to be the Cat class. birthDate: Date traits Name: String Age: (now: Date) -\u0026gt; Timespan defs Name: name Age: Date.Diff: birthDate, now Cat: cat # We define the trait Cat from the Cat module for Human String: Name + \u0026#34; \u0026#34; + Age.String + \u0026#34; owning cat: \u0026#34; + Cat.String # This calls the Cat trait on our Human, and calls the String trait on the resulting Cat. As you might have guessed, we now have some very similar traits:\nCat.Name and Human.Name Cat.Age and Human.Age This might be a good thing. If you think of a name as an id, it\u0026rsquo;s good to keep different types of them. A Cat and Human might have the same name, but they refer to different entities.\nHowever, you might also say a name is a name, and it shouldn\u0026rsquo;t matter what it\u0026rsquo;s naming. In that case, you can extract the Name trait from both:\ntrait Name: String And then you don\u0026rsquo;t have to declare the trait on the Human and the Cat, you only have to define its implementation. It will still be part of the Cat and Human interfaces if you define it within their modules.\nThere are two things I had imagined which we haven\u0026rsquo;t covered yet, declaring functions and structs.\nA function may take some arguments, and MUST return at least one value. It CAN NOT have side effects. So we\u0026rsquo;re fully functional ;). It can return the same type as one of its arguments though, in which case we can use the function to replace the original value.\nfn ConstantValue: () -\u0026gt; Int 42 fn ConstantValue: Int # Shorthand 42 fn AddOne: (x: Int) -\u0026gt; Int x + 1 fn AddOne: \u0026amp;Int # Shorthand for the above AddOne.0 + 1 fn AddOne: (x: Int) -\u0026gt; x # Signifies we could be replacing x x + 1 fn AddOne: (\u0026amp;x: Int) # Shorthand for the above x + 1 The last method can be used like this: let x: ConstantValue AddOne!: x # The exclamation mark lets us know we\u0026#39;re changing x let y: AddOne(x) # Doesn\u0026#39;t change x\nA trait can also have a \u0026amp; type, in which we can use it to \u0026ldquo;update\u0026rdquo; the class, i.e. override it, or override part of it. I still have to figure out how this will work exactly, but I\u0026rsquo;d like to be able to do Cat.Rename!: \u0026quot;Bobo\u0026quot;\nLastly, instead of classes, we can define structs. While class dependencies can only be things implementing traits, struct dependencies can only be core values.\nmod I64 implements Int struct x: i64 defs Op.Add: I64(x + Op.Add.right.x) # Creates a new struct of itself. We can access the private memory of `right` because it\u0026#39;s the same struct type. # etc. Like with a class module, we can define traits for the struct, and implement an interface.\nOp.Add Is defined like this:\nmod Op trait Add: (right: Self) -\u0026gt; Self The Self type obviously refers to whatever type the trait is being defined on.\nThis is it for now, it\u0026rsquo;s just a sketch. I might post more about it in the future.\n","permalink":"https://sytzez.com/blog/sketch-for-a-new-programming-language/","summary":"I\u0026rsquo;m coming up with the spec of a new programming language. Working title: \u0026ldquo;Compost\u0026rdquo;. Don\u0026rsquo;t worry, it\u0026rsquo;s just for fun. For now this is just a first sketch of the ideas I had today. They are subject to change.\nThe main idea of the language is ultimate composability and recomposability. It forces the programmer to think in terms of the minimum amount of dependencies required for each part of the code, and makes each part as reusable as possible.","title":"Sketch for a new programming language"},{"content":"In this blog I will show how I composed the baroque style piece \u0026lsquo;Ouverture\u0026rsquo; starting with simple, strict two-voice counterpoint, and then embellishing that into a fuller baroque style.\nMost of the material is derived from a single melody which is varied using augmentation, fragmentation, inversion and embellishment.\nIn the sheet music for this blog I\u0026rsquo;ve added numbers in between the two staves indicating the intervals between the top and the bottom voice. This is intended to make the two-voice counterpoint clearer. 6ths and 3rds are good, 8ths and 5ths are ok. Consecutive 8ths and 5ths are forbidden. Dissonant 2nds, 4ths and 7ths need to be on weak beats, unless they have a good \u0026lsquo;reason\u0026rsquo; not to be.\nGood reasons for these dissonant intervals are the rules for \u0026rsquo;nonchord tones\u0026rsquo;, which I\u0026rsquo;ve also included in the score as abbreviations. There\u0026rsquo;s a visual explanation of these rules here, and also on wikipedia. Another reason dissonant intervals could be justified is if they sound like a consonant interval. For example, an augmented 2nd sounds like a minor 3rd.\nHere\u0026rsquo;s a list of the abbreviations that are used:\nAbbreviation Meaning Ret. Retardation. A voice moves up later than expected. This has to be on an accented beat. Sus. Suspension. A voice moves down later than expected. Also on an accented beat. NT Neighboring tone. A voice moves up or down and then back. PT Passing tone. A voice uses an intermediary step to go to another tone. \u0026gt;PT Accented passing tone. The same but on an accented beat. Ant. Anticipation. A voice moves up or down sooner than expected. Emb. Embellishment. Multiple notes are added. Section A First phrase The piece starts with the main melody in the top voice. The melody is played simultaneously an octave below with double note values, meaning at half the speed, also known as \u0026lsquo;augmented\u0026rsquo;. The phrase closes with a cadence in the home key of F minor.\nYour browser does not support HTML5 audio. In the next version, the eighth note run is sped up into a sixteenth note run. Non-chord tones and embellishments are added that add dissonance.\nYour browser does not support HTML5 audio. In the final version, there are also some middle voices. (You can listen to the final piece at the bottom of the page)\nSecond phrase The second phrase consists of two similar sequences, both moving downwards by step. The bass uses the first four notes of the main melody, with the third note elongated. The top voice also uses a variation of the beginning of the melody.\nAfter the first sequence, there is a cadence in A flat major, the relative major of the home key. After the second sequence there is a half-cadence in C minor, which is the dominant key of the home key.\nThe harmony lingers on the dominant of C minor for a bit before concluding with a full cadence in C minor, with a picardy third at the end.\nYour browser does not support HTML5 audio. In the next iteration, embellishments are added. The three note run turns into a four note run in the second sequence. The amount of runs increases when the music approaches the final cadence.\nYour browser does not support HTML5 audio. In the final iteration, as in the first section, more middle voices are added to enrich the harmony.\nSection B Third phrase This phrase, in the dominant key of C minor, starts with an inversion of the melody in both the top and the bottom voice. The bottom voice, as in the first phrase, contains an augmented version of that melody. In bar 3, an other voice enters below the previous bottom voice. The phrase ends with a half cadence in G minor.\nYour browser does not support HTML5 audio. Suspensions and other nonchord tones are added in the next version:\nYour browser does not support HTML5 audio. In the final version, another voice is added. Strange chords such as augmented chords are formed.\nFourth phrase After the previous phrase ended on the dominant of G minor, this phrase unexpectedly starts in B flat major, the relative major of G minor and also the subdominant of the home key.\nLike the second phrase, it used shortened variations of the melody to build a sequence. This time the melody is inverted, and the sequence moves up instead of down. The top voice has starts out with a fragment of the melody but then continues freely. At the end of the phrase there is a half cadence in the home key of F minor.\nYour browser does not support HTML5 audio. In the next iteration, again, embellishments are added. More and more sixteenth notes are added as the melody rises and the half cadence is approached. The last two bars before the half cadence contain a long downwards run in the top voice.\nYour browser does not support HTML5 audio. Fifth phrase After the last phrase ended on a half cadence in F minor, the home key, the bass moves down stepwise from the 5th to the 1st degree.\nOn top of the bass, two voices imitate each other, playing variations of the beginning of the main melody, both rising. Then, there\u0026rsquo;s a final cadence to conclude the piece.\nYour browser does not support HTML5 audio. In the final version, more voices are added.\nResult Listen to the complete piece.\n","permalink":"https://sytzez.com/blog/composing-ouverture/","summary":"In this blog I will show how I composed the baroque style piece \u0026lsquo;Ouverture\u0026rsquo; starting with simple, strict two-voice counterpoint, and then embellishing that into a fuller baroque style.\nMost of the material is derived from a single melody which is varied using augmentation, fragmentation, inversion and embellishment.\nIn the sheet music for this blog I\u0026rsquo;ve added numbers in between the two staves indicating the intervals between the top and the bottom voice.","title":"Composing 'Ouverture'"},{"content":"In this blog I will explain how to easily add sheet music to your site, such as the example below. Note how the division of the bars adjusts when you shrink your screen width, it\u0026rsquo;s truly responsive!\nIntroduction When writing blogs about music, you might want to render snippets of music notation in between paragraphs of text. I will show you how to easily embed MusicXML content within your Hugo posts.\nMusicXML is the most common format of exchanging musical notation information between different programs. Whatever musical notation software you use, chances are very high they have an \u0026ldquo;export to MusicXML\u0026rdquo; functionality. Examples include Sibelius, Finale, noteflight and many others. If you want to use a free, fully functional program to create or edit musical notation, I recommend downloading MuseScore.\nTo render your MusicXML files as notation on your Hugo site, we will be using a javascript library called OpenSheetMusicDisplay. It reads MusicXML and renders it as an SVG using the widely used VexFlow library. It also supports guitar tabs.\n1. Add scripts to the header To start, add the following scripts to your header:\n\u0026lt;script id=\u0026#34;osmd-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/opensheetmusicdisplay@1.5.7/build/opensheetmusicdisplay.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; (function () { // Wait for the DOM to render and the osmd script to load. document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, loadOsmd) document.getElementById(\u0026#39;osmd-script\u0026#39;).addEventListener(\u0026#39;load\u0026#39;, loadOsmd) var wait = true function loadOsmd() { // This is just to make sure both load events have fired before we do anything. if (wait) { wait = false return } // Iterate through all elements with class \u0026#39;osmd-container\u0026#39;. document.querySelectorAll(\u0026#39;.osmd-container\u0026#39;).forEach(function (container) { // Create an OpenSheetMusicDisplay object for the container. var osmd = new opensheetmusicdisplay.OpenSheetMusicDisplay(container, { // Use minimal spacing and hide the title and instrument names. drawingParameters: \u0026#39;compacttight\u0026#39; }) // Load the MusicXML file. osmd.load(container.dataset.musicXmlSrc) .then(function () { // Render the notation inside the container. osmd.render() }) }) } })(); \u0026lt;/script\u0026gt; It loads the OpenSheetMusicDisplay script asynchronously. After that script has been loaded and the DOM has finished rendering, it goes through all elements with the osmd-container class. For each of those containers, it creates a new OpenSheetMusicDisplay object and renders the MusicXML content inside it.\n2. Create the music-xml shortcode To populate a page with osmd-container classes we can create a Hugo shortcode by adding a file called layouts/shortcodes/music-xml.html with the following contents:\n\u0026lt;div class=\u0026#34;osmd-container\u0026#34; data-music-xml-src=\u0026#34;{{ .Get 0 }}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; It simply renders an empty div with the osmd-container class and a data-music-xml-src attribute containing the MusicXML url which is provided to the shortcode as an argument. The header script will convert this into musical notation.\n3. Use the shortcode inside your content The shortcode can be used from within any Hugo content or layout file:\n{{\u0026lt; music-xml \u0026#34;/music-xml/your-music-xml.mxl\u0026#34; \u0026gt;}} Simply provide the local or global path to a MusicXML file.\nNote that this doesn\u0026rsquo;t produce any audio by itself. I like to add an \u0026lt;audio\u0026gt; tag with an mp3 file below the notation to provide playback functionality.\n","permalink":"https://sytzez.com/blog/responsive-sheet-music-in-hugo-using-music-xml/","summary":"In this blog I will explain how to easily add sheet music to your site, such as the example below. Note how the division of the bars adjusts when you shrink your screen width, it\u0026rsquo;s truly responsive!\nIntroduction When writing blogs about music, you might want to render snippets of music notation in between paragraphs of text. I will show you how to easily embed MusicXML content within your Hugo posts.","title":"Responsive sheet music in Hugo using MusicXML"},{"content":"The two skills of solfege Solfege, in its fullest sense, is the art of translating musical ideas from one representation into another. It teaches the skill of, on the one hand, recognising music in all its forms and, on the other hand, reproducing music in another form.\ngraph RL A[Music] subgraph solfege B[Recognition] C[Reproduction] end A---B C---A Music\u0026rsquo;s primary medium is sound. Another common medium is music notation, which is written using special musical symbols known as \u0026rsquo;notes\u0026rsquo;. Besides being represented by symbols, music can be described in written or spoken language. The availability of musicological terminology can make verbal descriptions as precise or even preciser than musical notation.\nSolfege teaches the ability of understanding each of these three forms, as well as being able to accurately reproduce the same musical idea in another form.\nThe three representations A musical element is the smallest building block of music such as a pitch, an interval or a note value. Each musical element can be expressed in the three different representations mentioned before. If you are able to recognise and reproduce each representation, you have mastered the solfege of that specific musical element. The three reperesentations of a musical element are its sound, its name and its notation.\ngraph LR subgraph Musical element A[Name]---B[Sound] B---C[Notation] C---A end For example: the pitch \u0026lsquo;C4\u0026rsquo; (C natural in the fourth octave) has an identifiable sound quality, a certain frequency. While the timbre, dynamic or articulation of the sound might vary, the identifiable part is its frequency (assuming a certain tuning). Regardless of the tuning, it has an identifiable quality in the context of other pitches in the same tuning: C4 is always a whole tone below D4. Besides its sound quality, C4 also has a position on the musical staff, relative to the clef. Its sound is its sound, its name is \u0026lsquo;C4\u0026rsquo;, its notation is the position on the staff.\nAnother example is the interval of a major third (M3). While the M3 doesn\u0026rsquo;t have a specific pitch, its quality is identifiable when heard. Each dyad of notes that is a major third apart has that sound quality. It is also recognisable in notation, by the vertical distance between two notes.\nYou could argue that a major third (M3) is not identifiable purely by its sound, because an augmented second (A2) has the same sound quality. When the interval is isolated this is true, but in a broader musical context (assuming there is tonal harmony), there is an objective difference between a M3 and a A2, related to the melodic outline it\u0026rsquo;s used in, or the functional harmonic progression the chord with the interval is part of. making it possible to recognise the different between a M3 or a A2 purely by listening. And that is definitely part of solfege.\nThe same three representation can be derived from rhythmic note values, chords, dynamics, articulation, tempo indications, tonalities, modulations, time signatures and other musical elements.\nThe six modes We\u0026rsquo;ve determined that solfege requires both recognising and reproducing musical representations. We\u0026rsquo;ve also determined that there are three main representations of a musical element.\nFor each musical element, we can \u0026lsquo;do\u0026rsquo; solfege in a number of different ways by varying the representation we recognise and the representation we reproduce. Since there are three representations, there must be six (two times three) ways of doing solfege. I\u0026rsquo;ll call them modes of solfege.\ngraph TD A[Sound]--\u003e|Sound to Language|B[Language] B--\u003e|Language to Notation|C[Notation] C--\u003e|Notation to Sound|A A--\u003e|Sound to Notation|C B--\u003e|Language to Sound|A C--\u003e|Notation to Language|B To master the solfege of a musical element means to master each of these six modes: Sound to language, language to notation, notation to sound, sound to notation, language to sound and notation to language. Each of them can be practised separately.\nTo give example of one of these modes: \u0026lsquo;sound to name\u0026rsquo; means listening to a sound and being able to call the element by its name, without using any notation. \u0026lsquo;Notation to sound\u0026rsquo; means being able to read notes and hear in your head or physically reproduce the sound accurately. With some imagination you can easily imagine the other modes.\nOnce you\u0026rsquo;re able to succesfully perform each of these six modes for a specific musical element, the three representations will become a unified trinity in your mind. You\u0026rsquo;ll be able to understand and utilize the musical element to its full extent.\n","permalink":"https://sytzez.com/blog/modes-of-solfege/","summary":"The two skills of solfege Solfege, in its fullest sense, is the art of translating musical ideas from one representation into another. It teaches the skill of, on the one hand, recognising music in all its forms and, on the other hand, reproducing music in another form.\ngraph RL A[Music] subgraph solfege B[Recognition] C[Reproduction] end A---B C---A Music\u0026rsquo;s primary medium is sound. Another common medium is music notation, which is written using special musical symbols known as \u0026rsquo;notes\u0026rsquo;.","title":"Modes of Solfege"},{"content":"I\u0026rsquo;ve been thinking a while about starting a blog to get various ideas out there in the world, whether they be about programming, music or other things. Getting content out there on \u0026rsquo;the web\u0026rsquo; might help me promote the things I\u0026rsquo;m doing, attract likeminded people or people that can help me in my endeavours, and it can help me hold myself accountable to the ideas I get and the goals I set for myself. Possibly it will do none of those things, but it will still help me think \u0026lsquo;out loud\u0026rsquo; and allow me to practise putting thoughts into words.\nCreating any content whatsoever will also train my content muscle and make me a better content producer, so for now the quality doesn\u0026rsquo;t really matter. I\u0026rsquo;ll just try creating as many blogs as possible. (warning to self: that sounds like a goal and accountability). Creating something daily or even weekly might be a bar too high, with the little amount of free time I have these days. I won\u0026rsquo;t set any goals for now, let\u0026rsquo;s see where it goes.\nThe thing stopping me from doing this lately was simply not being able to choose a platform to blog on. I wanted something that won\u0026rsquo;t cost me too much time and effort, so building my own site in Laravel or Ruby on Rails was out of the question. I\u0026rsquo;ve tried Wordpress and other more modern content managing systems like Wix, but those just didn\u0026rsquo;t feel right. Then I came across the Hugo templating system, driven by the Go programming language. I was amazed at first by the speed of it. It was able to render over 18000 pages in under a minute at the company I\u0026rsquo;m working at. When I looked more into it, I really liked the file structure it forces you to use, so you don\u0026rsquo;t have to make too many decisions yourself, and the fact that it deals with assets such as CSS and JS/TS for you, and that it allows you to just write pages using Markdown. I was already using Markdown for personal and work related notes, using a pretty cool tool called \u0026lsquo;Obsidian\u0026rsquo;, so it wouldn\u0026rsquo;t be a huge adaptation for me to start blogging in Markdown. I also like that is just generates a static site that I can plop onto any hosting platform or even just on Github sites. I also like being able to just Git versioning and not having to rely on some website to edit my content.\nFor now I\u0026rsquo;m just using an existing theme to get familiar with Hugo templating, but I\u0026rsquo;ll probably create my own simple theme at some point. (Uh oh, more accountability). Anyway that\u0026rsquo;s enough for now.\nSome ideas of future blog posts:\nLaying out my ideas of classical music composition. (I already have a draft ready) Analysing some pieces using those ideas. Implementing a shortcode to display music notation in Hugo. (using Vexflow) Talking about the music app I\u0026rsquo;m working on. Discovery and comparison of different existing apps similar to the app I\u0026rsquo;m building (and how mine\u0026rsquo;s better). Programming related stuff, especially related to Rust. Who knows what else\u0026hellip; ","permalink":"https://sytzez.com/blog/initial-post/","summary":"I\u0026rsquo;ve been thinking a while about starting a blog to get various ideas out there in the world, whether they be about programming, music or other things. Getting content out there on \u0026rsquo;the web\u0026rsquo; might help me promote the things I\u0026rsquo;m doing, attract likeminded people or people that can help me in my endeavours, and it can help me hold myself accountable to the ideas I get and the goals I set for myself.","title":"Initial post"}]