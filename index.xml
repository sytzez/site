<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sytzez</title>
    <link>https://sytzez.com/</link>
    <description>Recent content on sytzez</description>
    <image>
      <url>https://sytzez.com/papermod-cover.png</url>
      <link>https://sytzez.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sytzez.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compost update December &#39;22: Match, If and Booleans</title>
      <link>https://sytzez.com/blog/compost-update-december-22-match-if-and-booleans/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/compost-update-december-22-match-if-and-booleans/</guid>
      <description>It&amp;rsquo;s been due time to add control flow into Compost. We have it now!
Match Expressions Match expressions allow you to use different flows based on some element&amp;rsquo;s type. Here&amp;rsquo;s an example:
lets StringOrNothing(thing: @String | ?): String match matchedThing: thing @String: matchedThing.String ? : &amp;#39;Nothing&amp;#39; It takes a thing that implements the String trait or not. If it implements String, it returns that string. Otherwise it returns the String &amp;rsquo;nothing&#39;.</description>
    </item>
    
    <item>
      <title>Analysing the second page of Bach&#39;s French Ouverture BWV 831</title>
      <link>https://sytzez.com/blog/analysing-the-second-page-of-bachs-french-ouverture/</link>
      <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/analysing-the-second-page-of-bachs-french-ouverture/</guid>
      <description>After the opening section which I&amp;rsquo;ve analysed here, a fugue starts, which I will analysis in this post.
As is common to fugues, this fugue starts with the subject in one voice, which is answered by the subject on the dominant in another voice, accompanied by a countersubject. After a short transition section, the subject is played in the tonic in the bass voice, accompanied by the countersubject and some other contrapuntal material.</description>
    </item>
    
    <item>
      <title>Analysing the first page of Bach&#39;s French Ouverture BWV 831</title>
      <link>https://sytzez.com/blog/analysing-the-first-page-of-bachs-french-ouverture/</link>
      <pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/analysing-the-first-page-of-bachs-french-ouverture/</guid>
      <description>The beginning of Bach&amp;rsquo;s Ouverture in B minor is built from sequences hidden in plain sight. Sequences are parts of music that are repeated an interval higher or lower. In this particular piece, single notes in the melody and in the bass are repeated sequencially, moving in parallel most of the time. Due to embellishments and octave displacement, the sequences might not immediately be clear to the ear, but once you&amp;rsquo;ve seen my analysis, you&amp;rsquo;ll be convinced that this page of Bach&amp;rsquo;s music is fundamentally based on sequences.</description>
    </item>
    
    <item>
      <title>Creating a Compiler for Compost using Rust, Part 1: Lexical Analysis</title>
      <link>https://sytzez.com/blog/creating-a-compiler-for-compost-using-rust-part-1-lexical-analysis/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/creating-a-compiler-for-compost-using-rust-part-1-lexical-analysis/</guid>
      <description>I&amp;rsquo;ve set out to write a compiler for Compost, the experimental programming language I came up with about a month ago. The repository for it can be found on GitHub and there is also a playground available where you can try out the language. This is the first part of a series of blogs detailing my experience of writing my first compiler.
Structure of a Compiler Before embarking on this journey, I did some research on how compilers normally work.</description>
    </item>
    
    <item>
      <title>Creating a Compiler for Compost using Rust, Part 2: Syntactic Analysis</title>
      <link>https://sytzez.com/blog/creating-a-compiler-for-compost-using-rust-part-2-syntactic-analysis/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/creating-a-compiler-for-compost-using-rust-part-2-syntactic-analysis/</guid>
      <description>In the previous post, I described how I implemented lexical analysis for Compost. The next phase in compilation is syntactic analysis, which turns the string of tokens into an &amp;lsquo;abstract syntax tree&amp;rsquo;. It also throws meaningful errors when wrong syntax is used.
The Abstract Syntax Tree An abstract syntax tree (AST) represents the code at the level of statements and expressions. Every type of statement and expression has its own data structure, which can contain other statements or expressions, forming a tree of data structures.</description>
    </item>
    
    <item>
      <title>Creating a Compiler for Compost using Rust, Part 3: Semantic Analysis</title>
      <link>https://sytzez.com/blog/creating-a-compiler-for-compost-using-rust-part-3-semantic-analysis/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/creating-a-compiler-for-compost-using-rust-part-3-semantic-analysis/</guid>
      <description>In the previous installment of this series, I described how I turned the tokens into an abstract syntax tree (AST). The AST contains all statements, expressions and types of the program, but doesn&amp;rsquo;t link the together. All the names of variables, modules, traits and functions are simply Rust Strings without any meaning beyond that.
To give meaning to these names we can use semantic analysis, which resolves the names into references to the right piece of information in our program.</description>
    </item>
    
    <item>
      <title>How I manage my work like a boss</title>
      <link>https://sytzez.com/blog/how-i-manage-my-work-like-a-boss/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/how-i-manage-my-work-like-a-boss/</guid>
      <description>If you have deadlines on top of people asking you to do stuff ASAP, on top of issues that need to be fixed immediately, on top of many meetings throughout the day, it&amp;rsquo;s easy to lose track of your to do list or prioritise the wrong things.
My to do list method has helped me keep an overview of everything I need to do. It&amp;rsquo;s low overhead once you get used to it.</description>
    </item>
    
    <item>
      <title>Sketch for a new programming language: Part 2</title>
      <link>https://sytzez.com/blog/sketch-for-a-new-programming-language-2/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/sketch-for-a-new-programming-language-2/</guid>
      <description>A solution to inheritance I&amp;rsquo;ve had some more thought about my programming language &amp;ldquo;Compost&amp;rdquo;. It might have its own solution to the old problems of object oriented programming, mainly class inheritance.
One of the problems class inheritance tries to solve is code reuse between classes. In OOP, you&amp;rsquo;d solve this by creating a superclass which contains the methods which are shared between classes. The classes that use those method then need to inheritd from that super class.</description>
    </item>
    
    <item>
      <title>Sketch for a new programming language</title>
      <link>https://sytzez.com/blog/sketch-for-a-new-programming-language/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/sketch-for-a-new-programming-language/</guid>
      <description>I&amp;rsquo;m coming up with the spec of a new programming language. Working title: &amp;ldquo;Compost&amp;rdquo;. Don&amp;rsquo;t worry, it&amp;rsquo;s just for fun. For now this is just a first sketch of the ideas I had today. They are subject to change.
The main idea of the language is ultimate composability and recomposability. It forces the programmer to think in terms of the minimum amount of dependencies required for each part of the code, and makes each part as reusable as possible.</description>
    </item>
    
    <item>
      <title>Composing &#39;Ouverture&#39;</title>
      <link>https://sytzez.com/blog/composing-ouverture/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/composing-ouverture/</guid>
      <description>In this blog I will show how I composed the baroque style piece &amp;lsquo;Ouverture&amp;rsquo; starting with simple, strict two-voice counterpoint, and then embellishing that into a fuller baroque style.
Most of the material is derived from a single melody which is varied using augmentation, fragmentation, inversion and embellishment.
In the sheet music for this blog I&amp;rsquo;ve added numbers in between the two staves indicating the intervals between the top and the bottom voice.</description>
    </item>
    
    <item>
      <title>Responsive sheet music in Hugo using MusicXML</title>
      <link>https://sytzez.com/blog/responsive-sheet-music-in-hugo-using-music-xml/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/responsive-sheet-music-in-hugo-using-music-xml/</guid>
      <description>In this blog I will explain how to easily add sheet music to your site, such as the example below. Note how the division of the bars adjusts when you shrink your screen width, it&amp;rsquo;s truly responsive!
Introduction When writing blogs about music, you might want to render snippets of music notation in between paragraphs of text. I will show you how to easily embed MusicXML content within your Hugo posts.</description>
    </item>
    
    <item>
      <title>Modes of Solfege</title>
      <link>https://sytzez.com/blog/modes-of-solfege/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/modes-of-solfege/</guid>
      <description>The two skills of solfege Solfege, in its fullest sense, is the art of translating musical ideas from one representation into another. It teaches the skill of, on the one hand, recognising music in all its forms and, on the other hand, reproducing music in another form.
graph RL A[Music] subgraph solfege B[Recognition] C[Reproduction] end A---B C---A Music&amp;rsquo;s primary medium is sound. Another common medium is music notation, which is written using special musical symbols known as &amp;rsquo;notes&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Initial post</title>
      <link>https://sytzez.com/blog/initial-post/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sytzez.com/blog/initial-post/</guid>
      <description>I&amp;rsquo;ve been thinking a while about starting a blog to get various ideas out there in the world, whether they be about programming, music or other things. Getting content out there on &amp;rsquo;the web&amp;rsquo; might help me promote the things I&amp;rsquo;m doing, attract likeminded people or people that can help me in my endeavours, and it can help me hold myself accountable to the ideas I get and the goals I set for myself.</description>
    </item>
    
    
  </channel>
</rss>
